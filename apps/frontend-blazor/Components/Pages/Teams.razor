@page "/teams"
@using System.Text.Json
@using System.Text.Json.Serialization
@using frontend_blazor.Models
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration

<PageTitle>Teams</PageTitle>
<h1>Teams</h1>

@if (teams != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Flag</th>
                <th>Name</th>
                <th>Is National Team</th>
                <th>Code</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in teams)
            {
                <tr>
                    <td>@team.Id</td>
                    <td>
                        <img src=@team.ImagePath style="height: 30px; width: 50px;"/>
                    </td>
                    <td>@team.Name</td>
                    <td>@team.NationalTeam</td>
                    <td>@team.Code</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p><em>Loading...</em></p>
    if (ExceptionMessage != "") {
        <em>@ExceptionMessage</em>
    }
}


@code {
    private List<Team> teams;
    private string ExceptionMessage = "";

    protected override async Task OnInitializedAsync()
    {
      teams = await GetTeams();
    }

    private async Task<List<Team>?> GetTeams()
    {
      string? TeamsUrl = Configuration["Urls:Teams"];
      var client = new HttpClient();
      try {
        var response = await client.GetAsync($"{TeamsUrl}/list");
        if (response.IsSuccessStatusCode)
        {
            var responseStream = await response.Content.ReadAsStreamAsync();
            var teams = await JsonSerializer.DeserializeAsync<List<Team>>(responseStream);
            Console.WriteLine(teams.Count);
            return teams;
        }
      }
      catch ( System.Net.Http.HttpRequestException E) {
        var message = "Error Getting Teams Data, Make sure the Teams API is Up";
        Console.WriteLine(message, E.StackTrace);
        ExceptionMessage = message;
      }

      return null;
      
    }
}
