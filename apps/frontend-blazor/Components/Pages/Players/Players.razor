@page "/players"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Xml.Linq
@using frontend_blazor.Models
@using Microsoft.AspNetCore.WebUtilities
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
@inject NavigationManager Navigation
<PageTitle>Players</PageTitle>

<div>
  <h1>Players</h1>
  <select 
    name="country-select" 
    id="country-select"
    @onchange="OnCountrySelected">
    <option value="all">All Countries</option>
    @foreach (var country in CountriesList)
    {
      if (country == SelectedCountry){
        <option value="@country" selected="@country">@country</option> 
      }else {
        <option value="@country">@country</option>
      }
    }
  </select>


  <select 
    name="position" 
    id="position"
    @onchange="OnPositionSelected">
    @foreach(var position in Positions)
    {
      if (position == SelectedPosition){
        <option value="@position" selected="@position">@position</option>
      }else {
        <option value="@position">@position</option>
      }
    }
  </select>

  <button 
    @onclick=ClearSearchFilters>
    Clear Filters
  </button>
</div>

<div>
</div>

@if(errorMessage == "") {
  <table class="table">
    <thead>
      <tr>
        <th>Fullname</th>
        <th>Country</th>
        <th>Position</th>
        <th>Batting Style</th>
        <th>Bowling Style</th>
      </tr>
    </thead>
    
      @foreach (var player in PlayersList)
      {
        <tr>
          <td>@player.Fullname</td>
          <td>@player.CountryName</td>
          <td>@player.Position</td>
          <td>@player.Battingstyle</td>
          <td>@player.Bowlingstyle</td>
        </tr>
      }
  </table>
}else {
  <div>
    <hr />
    <h5>Make sure that the backend is properly up and running.</h5>
    <p>@errorMessage</p>
  </div>
}


@code {

  List<Player> PlayersList = new List<Player>();
  List<string> Positions = new List<string>([
      "All",
      "Allrounder",
      "Wicketkeeper",
      "Batsman",
      "Bowler"
    ]);

  [SupplyParameterFromQuery( Name = "country")]
  public string SelectedCountry { get; set; } = "";

  [SupplyParameterFromQuery( Name = "position")]
  public string SelectedPosition{ get; set; } = "";

  string errorMessage = "";

  List<string> CountriesList = new List<string>();

  private void OnCountrySelected(ChangeEventArgs e){
    var selectedCountryName = e?.Value?.ToString();
    if (selectedCountryName != null){
      SelectedCountry = selectedCountryName;
      string uri = Navigation.GetUriWithQueryParameter("country", SelectedCountry);
      Navigation.NavigateTo(uri, forceLoad: true);
      StateHasChanged();
    }
  }

  private void OnPositionSelected(ChangeEventArgs e) {
    var selectedPositionName = e?.Value?.ToString();
    if (selectedPositionName != null){
      SelectedPosition = selectedPositionName;
      string uri = Navigation.GetUriWithQueryParameter("position", SelectedPosition);
      Navigation.NavigateTo(uri, forceLoad: true);
      StateHasChanged();
    }
  }

  private void ClearSearchFilters() {
    string uri = "/players/";
    Navigation.NavigateTo(uri, forceLoad: true);
  }


  protected override async Task OnInitializedAsync() {
    
    CountriesList = await getCountryNames();
    List<Player>? playersResponse = await getPlayersList(
      SelectedTeam: SelectedCountry,
      SelectedPosition: SelectedPosition
    );
    if(playersResponse is not null){
      PlayersList = playersResponse;
    }
  }

  private async Task<List<string>> getCountryNames() {
    try{
      string? PlayersUrl = Configuration["Urls:Players"];
      HttpClient client = new HttpClient();
      var response = await client.GetAsync($"{PlayersUrl}/countries_list");
      if (response.IsSuccessStatusCode) {
        var responseString = await response.Content.ReadAsStringAsync();
        if (responseString is null ){
          Console.WriteLine("Found no countries");
          return new List<string>();
        }
        CountriesNames? countriesList = JsonSerializer.Deserialize<CountriesNames>(responseString);
        if(countriesList is not null){
          List<string> countries = countriesList.Countries.ToList<string>();
          return countries;
        }
      }
      return new List<string>();
    }
    catch (Exception e) {
      var message = "Error occured while fetching countries";
      Console.WriteLine(message, e.StackTrace);
      errorMessage = message;
      return new List<string>();
    }
  }  

  private async Task<List<Player>> getPlayersList(
    string? SelectedTeam = "", 
    string? SelectedPosition = ""
  ) {
    try{
      string? PlayersUrl = Configuration["Urls:Players"];
      HttpClient client = new HttpClient();
      Dictionary<string, string> filterModel = new Dictionary<string, string>();
      if (SelectedTeam is not null && SelectedTeam != "all"){
        filterModel["country_name"] = SelectedTeam;
      }
      if (SelectedPosition is not null && SelectedPosition.ToLower() != "all"){
        filterModel["position"]     = SelectedPosition;
      }
      string playerSearchUrl = $"{PlayersUrl}/list";
      string queryString = QueryHelpers.AddQueryString(playerSearchUrl, filterModel);
      Console.WriteLine(queryString);
      var response = await client.GetAsync(queryString);
      if (response.IsSuccessStatusCode) {
        var responseString = await response.Content.ReadAsStringAsync();
        if (responseString is null ){
          return [];
        }
        List<Player>? playersList = JsonSerializer.Deserialize<List<Player>>(responseString);
        if(playersList is not null){
          return playersList;
        }
      }
      return [];
    }
    catch (Exception e) {
      var message = "Error happened when fetching players list, make sure that players service is online.";
      Console.WriteLine(message, e.StackTrace);
      errorMessage = message;
      return new List<Player>();
    }
  }
}
