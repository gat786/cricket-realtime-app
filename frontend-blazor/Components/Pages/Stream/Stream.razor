@page "/stream/{streamtitle}"
@using System.Text.Json
@using System.Text.Json.Serialization
@using frontend_blazor.Models
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>We will stream score changes here</PageTitle>

<div class="match-details-top">
  @if (MatchDetailsFetched != null){
    @if (Teams != null && Teams.Count > 1) {
      <div>
        <div class="match-title">
          <h2>@Teams[0].Name vs. @Teams[1].Name</h2> 
        </div>
        <div class="match-details">
          <div>
            <span class="type">Date:</span>
            <span class="data">@MatchDetailsFetched.Data.Dates[0]</span>
          </div>
          <div>
            <span class="type">City:</span>
            <span class="data">@MatchDetailsFetched.Data.City</span>
          </div>
          <div>
            <span class="type">Match Type:</span> 
            <span class="data">@MatchDetailsFetched.Data.MatchType</span>
          </div>
        </div>
      </div>
      <div>
        <img src=@Teams[0].ImagePath class="country-flags" alt=@Teams[0].Name />
        <img src=@Teams[1].ImagePath class="country-flags" alt=@Teams[1].Name />
      </div>
    }
  }
</div>

<div class="data-grid">
  <div class="scores-panel">
    <div class="tabpanel">
      <h5>Scores</h5>
    </div>
  </div>
  @if (MatchDetailsFetched != null) {
    <div class="players-panel">
      <div class="tabpanel">
        <h5>Players</h5>
        <div>
          <button 
            class="team-name-button @(CurrentlySelectedTeam == MatchDetailsFetched.Data.Teams[0] ? "selected-team" : "")"
            @onclick="(() => SelectTeam(MatchDetailsFetched.Data.Teams[0]))">
            @MatchDetailsFetched.Data.Teams[0]
          </button>
          <button
            class="team-name-button @(CurrentlySelectedTeam == MatchDetailsFetched.Data.Teams[1] ? "selected-team" : "")"
            @onclick="(() => SelectTeam(MatchDetailsFetched.Data.Teams[1]))">
            @MatchDetailsFetched.Data.Teams[1]
          </button>
          <div class="caption">
            * Click on teams name to view its players
          </div>
        </div>
        @if (CurrentlySelectedTeam != null) {
          <div class="player-list">
            @foreach (Player player in SelectedTeamPlayersList){
              <div class="item">
                <img src=@player.ImagePath class="player-thumbnail" alt=@player.Fullname />
                <span>@player.Fullname</span>
              </div>
            }
          </div>
        }
      </div>
    </div>
  }
</div>

@code{
  [Parameter]
  public string StreamTitle {get; set;}

  public MatchDetailsRoot? MatchDetailsFetched;

  HttpClient client = new HttpClient();
  public List<Team> Teams = new List<Team>();

  @functions{
    public string CurrentlySelectedTeam {get; set;}
    public List<Player> SelectedTeamPlayersList {get; set;} = new List<Player>();

    public async Task SelectTeam(string TeamName) {
      string? PlayersUrl = Configuration["Urls:Players"];

      Console.WriteLine($"Selecting {TeamName}");
      CurrentlySelectedTeam = TeamName;
      SelectedTeamPlayersList = new List<Player>();

      List<string>? playersList = MatchDetailsFetched?.Data.Players[CurrentlySelectedTeam];
      
      foreach(var player in playersList) {
        string playersInfoUrl = $"{PlayersUrl}/search";
        PlayerSearchModel searchModel = new PlayerSearchModel(){
          Name = player, 
          CountryName = CurrentlySelectedTeam
        };
        HttpResponseMessage responseMessage = await client.PostAsJsonAsync<PlayerSearchModel>(playersInfoUrl,searchModel);

        if (responseMessage.IsSuccessStatusCode) {
          string response = await responseMessage.Content.ReadAsStringAsync();
          PlayersSearchResponse playersSearchResponse = JsonSerializer.Deserialize<PlayersSearchResponse>(response);
          if (playersSearchResponse != null && playersSearchResponse.Players.Count > 0) {
            Player mostCloseResult = playersSearchResponse.Players[0];
            SelectedTeamPlayersList.Add(mostCloseResult);
          }
        }
      }
    }
  }
  

  protected async override Task OnInitializedAsync(){
    string? ScoreUrl = Configuration["Urls:Score"];
    string? TeamsUrl = Configuration["Urls:Teams"];

    string _WebsocketUrl = $"{ScoreUrl}/live/{StreamTitle}";
    string _MatchDetailUrl = $"{ScoreUrl}/{StreamTitle}";

    string MatchDetails = await client.GetStringAsync(_MatchDetailUrl);
    MatchDetailsFetched = JsonSerializer.Deserialize<MatchDetailsRoot>(MatchDetails);

    if (MatchDetailsFetched != null) {
      foreach(string teamName in MatchDetailsFetched.Data.Teams){
        string teamDataString = await client.GetStringAsync($"{TeamsUrl}/{teamName.ToLower()}");
        Team? teamData = JsonSerializer.Deserialize<Team>(teamDataString);
        if (teamData != null) {
          Teams.Add(teamData);
        }
      }
    }
    
    Console.WriteLine(MatchDetailsFetched?.MatchId);
  }
}
