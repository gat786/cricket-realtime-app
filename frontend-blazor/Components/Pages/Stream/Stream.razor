@page "/stream/{streamtitle}"
@using System.Text.Json
@using System.Text.Json.Serialization
@using frontend_blazor.Models
@using frontend_blazor.Utils
@using WebSocketSharp
@using System.Text
@using frontend_blazor.Data
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
@attribute [StreamRendering]
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Live Streaming here</PageTitle>

<div class="match-details-top">
  @if (MatchDetailsFetched != null)
  {
    @if (Teams != null && Teams.Count > 1)
    {
      <div>
        <div class="match-title">
          <h2>@Teams[0].Name vs. @Teams[1].Name</h2>
        </div>
        <div class="match-details">
          <div>
            <span class="type">Date:</span>
            <span class="data">@MatchDetailsFetched.Data.Dates[0]</span>
          </div>
          <div>
            <span class="type">City:</span>
            <span class="data">@MatchDetailsFetched.Data.City</span>
          </div>
          <div>
            <span class="type">Match Type:</span>
            <span class="data">@MatchDetailsFetched.Data.MatchType</span>
          </div>
        </div>
      </div>
      <div>
        <img src=@Teams[0].ImagePath class="country-flags" alt=@Teams[0].Name />
        <img src=@Teams[1].ImagePath class="country-flags" alt=@Teams[1].Name />
      </div>
    }
  }
</div>

<div class="data-grid">
  <div class="scores-panel">
    <div class="tabpanel">
      <h5>Scores</h5>
    </div>
  </div>
  @if (MatchDetailsFetched != null)
  {
    <div class="players-panel">
      <div class="tabpanel">
        <h5>Players</h5>
        <div>
          <button
            class="team-name-button @(CurrentlySelectedTeam == MatchDetailsFetched.Data.Teams[0] ? "selected-team" : "")"
            @onclick="(() => ChangeSelectedTeam(MatchDetailsFetched.Data.Teams[0]))">
            @MatchDetailsFetched.Data.Teams[0]
          </button>
          <button
            class="team-name-button @(CurrentlySelectedTeam == MatchDetailsFetched.Data.Teams[1] ? "selected-team" : "")"
            @onclick="(() => ChangeSelectedTeam(MatchDetailsFetched.Data.Teams[1]))">
            @MatchDetailsFetched.Data.Teams[1]
          </button>
          <div class="caption">
            * Click on teams name to view its players
          </div>
        </div>
        @if (CurrentlySelectedTeam is not null)
        {
          <table class="player-list table">
            <thead>
              <tr>
                <th scope="col">Photo</th>
                <th scope="col">Player Name</th>
              </tr>
            </thead>
              <tbody>
                @foreach (Player player in playersList[CurrentlySelectedTeam])
                {
                <tr>
                  <td>
                    <img src=@player.ImagePath class="player-thumbnail" alt=@player.Fullname />
                  </td>
                  <td class="item">
                    <span>@player.Fullname</span>
                  </td>
                </tr>
                }
            </tbody>
          </table>
        }
      </div>
    </div>
  }
</div>

@code {
  [Parameter]
  public string? StreamTitle { get; set; }

  public MatchDetailsRoot? MatchDetailsFetched;

  public MatchState? matchState = null;

  HttpClient client = new HttpClient();
  WebSocket? wsClient;
  public List<Team> Teams = new List<Team>();
  public Dictionary<string, List<Player>>? playersList { get; set; } = new Dictionary<string, List<Player>>();

  private void ChangeSelectedTeam(string teamName) {
    CurrentlySelectedTeam = teamName;
    StateHasChanged();
  }

  @functions {
    public string? CurrentlySelectedTeam { get; set; }

    public async Task fetchTeamPlayers(string teamName)
    {
      string? PlayersUrl = Configuration["Urls:Players"];

      Console.WriteLine($"Selecting {teamName}");
      CurrentlySelectedTeam = teamName;
      var playersListObject = new List<Player>();

      List<string>? playersList = MatchDetailsFetched?.Data.Players[CurrentlySelectedTeam];

      if (playersList != null)
      {
        foreach (var player in playersList)
        {
          string playersInfoUrl = $"{PlayersUrl}/search";
          PlayerSearchModel searchModel = new PlayerSearchModel()
          {
            Name = player,
            CountryName = CurrentlySelectedTeam
          };
          HttpResponseMessage responseMessage = await client.PostAsJsonAsync<PlayerSearchModel>(playersInfoUrl, searchModel);

          if (responseMessage.IsSuccessStatusCode)
          {
            string response = await responseMessage.Content.ReadAsStringAsync();
            PlayersSearchResponse? playersSearchResponse = JsonSerializer.Deserialize<PlayersSearchResponse>(response);
            if (playersSearchResponse != null && playersSearchResponse.Players.Count > 0)
            {
              Player mostCloseResult = playersSearchResponse.Players[0];
              playersListObject.Add(mostCloseResult);
            }
            else
            {
              Player unfoundPlayer = new Player(player, player, player);
              playersListObject.Add(unfoundPlayer);
            }
          }
        }

      }
    }
  }


    private async Task StartStreaming()
    {
      if (StreamTitle == null) {
        return;
      }
      string? ScoreUrl = Configuration["Urls:ScoreWebSocket"];
      string streamingUrl = $"{ScoreUrl}/live/";
      Console.WriteLine($"Url: {streamingUrl}");

      wsClient = new WebSocket(streamingUrl);
      wsClient.Connect();

      var connection = wsClient.IsAlive;
      Console.WriteLine($"Connection is {connection}");

      var streamInitiationObj = new MatchStreamInitializer(StreamTitle);
      var streamInitiaitionJson = JsonSerializer.Serialize<MatchStreamInitializer>(
      streamInitiationObj
      );

      wsClient.Send(streamInitiaitionJson);

      wsClient.OnMessage += (sender, e) =>
      {
        Console.WriteLine(e.Data);
        WebsocketResponseType? messageType = ParseWebsocketData.GetMessageType(e.Data);
        dynamic? dataDynamic = JsonSerializer.Deserialize<dynamic>(e.Data);
        if (messageType is not null && dataDynamic is not null)
        {
          dynamic dataToParse = dataDynamic.GetProperty("data");
          if (messageType == WebsocketResponseType.BallData)
          {
            BallDataRoot ballDataRoot = JsonSerializer.Deserialize<BallDataRoot>(dataToParse);
            
          }
          else if (messageType == WebsocketResponseType.ErrorMessage)
          {
            
          }
          else if (messageType == WebsocketResponseType.Information)
          {
            
          }
          else if (messageType == WebsocketResponseType.Outcome)
          {
            OutcomeModel outcome = JsonSerializer.Deserialize<OutcomeModel>(dataToParse);
          }
          else if (messageType == WebsocketResponseType.MatchDetails){
            MatchDetailsRoot matchDetailsRoot = JsonSerializer.Deserialize<MatchDetailsRoot>(dataToParse);
            matchState = new MatchState(matchDetailsRoot.Data);
          }
        }
      };
    }
    protected async override Task OnInitializedAsync()
    {
      string? ScoreUrl = Configuration["Urls:Score"];
      string? TeamsUrl = Configuration["Urls:Teams"];

      string _WebsocketUrl = $"{ScoreUrl}/live/{StreamTitle}";
      string _MatchDetailUrl = $"{ScoreUrl}/{StreamTitle}";

      string MatchDetails = await client.GetStringAsync(_MatchDetailUrl);
      MatchDetailsFetched = JsonSerializer.Deserialize<MatchDetailsRoot>(MatchDetails);

      if (MatchDetailsFetched is not null)
      {
        foreach (string teamName in MatchDetailsFetched.Data.Teams)
        {
          string teamDataString = await client.GetStringAsync($"{TeamsUrl}/{teamName.ToLower()}");

          Team? teamData = JsonSerializer.Deserialize<Team>(teamDataString);
          if (teamData != null)
          {
            Teams.Add(teamData);
          }
        }
        foreach(var team in MatchDetailsFetched.Data.Players) {
          string teamName = team.Key;
          playersList[teamName] = new List<Player>();
          foreach(var playerName in team.Value){
            var helper = new DataHelper(Configuration);

            var playerSearchResponse = await helper.GetPlayerAsync(playerName, countryName: teamName);
            if (playerSearchResponse is not null) {
              if (playerSearchResponse.Players.Count > 0){
                Player mostClosestResult = playerSearchResponse.Players[0];
                if(mostClosestResult is not null){
                  playersList[teamName].Add(mostClosestResult);
                }
              }
            }
          }
        }
      }

      Console.WriteLine($"Starting Streaming of {MatchDetailsFetched?.MatchId}");
    }

    protected override void OnAfterRender(bool firstRender)
    {
      if (firstRender)
      {
        StartStreaming();
      }
    }

    public void Dispose()
    {
      Console.WriteLine("Disposing Websocket Connection");
      wsClient?.Close();
    }
}
