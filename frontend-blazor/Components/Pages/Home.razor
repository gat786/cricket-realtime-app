@page "/"
@attribute [StreamRendering]
@using System.Text.Json
@using System.Text.Json.Serialization
@using frontend_blazor.Utils
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
@inject ILogger<Home> Logger

<h3>Welcome to StreamIt</h3>
<hr />
<br />
<h4>All the currently ongoing matches can be viewed here</h4>


@if(Response == null) {
  <p>Make sure we have Scores API Setup</p>
}
else {
  if (Response?.Matches != null) {
    @foreach (var MatchData in Response.Matches){
      <div>
         @string.Join(" vs ", MatchData.Teams)
      </div>
    }
  }
  
}

@code {
  MatchListResponse? Response;
  string initial             = "Starting Data";
  protected async override Task OnInitializedAsync()
  {
    string? PlayersUrl = Configuration["Urls:Players"];
    string? TeamsUrl = Configuration["Urls:Teams"];
    string? ScoreUrl = Configuration["Urls:Score"];

    var client = new HttpClient();
    var response = await client.GetAsync(ScoreUrl + "/list");
    if (response.IsSuccessStatusCode)
    {
      var responseStream = await response.Content.ReadAsStringAsync();
      if (responseStream != null)
      {
        Response = JsonSerializer.Deserialize<MatchListResponse>(response.Content.ReadAsStream());
        Console.WriteLine(Response);
        initial             = "Ending Data";
        Console.WriteLine(initial);
      }
    }
    else
    {
      Console.WriteLine("Fetching Data failed");
    }
  }
}
